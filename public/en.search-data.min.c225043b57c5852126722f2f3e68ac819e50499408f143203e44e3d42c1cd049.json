[{"id":0,"href":"/docs/quickstart/","title":"Quickstart","section":"Docs","content":" p5.fab Quickstart # Here are a couple of ways to get started with p5.fab.\nOnline Editor # Using Chrome1, open the online editor. Design your artifact! You can start from one of the examples; try changing some of the values in the sketch to see what happens to the resulting object. Physically connect your computer to your fabrication machine2 with a USB cable and click \u0026lsquo;Connect\u0026rsquo;. Start making! Press \u0026lsquo;Print\u0026rsquo; to start streaming commands to your machine. Be sure to keep an eye out for anything that goes wrong; there\u0026rsquo;s no guarantee that your code will \u0026lsquo;work\u0026rsquo; in any conventional sense, but that\u0026rsquo;s part of the fun! Alternative Option: Local Installation # If you\u0026rsquo;d like to use your preferred code editor while using p5.fab:\nDownload the p5.fab.js library file and add the path to the \u0026lt;head\u0026gt; tag of your index.html file:\n\u0026lt;script src=\u0026quot;p5.fab.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\nYou should also add it\u0026rsquo;s dependencies, the p5.js library and the webserial communication:\n\u0026lt;script src=\u0026quot;https://cdn.jsdelivr.net/npm/p5@1.9.2/lib/p5.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://unpkg.com/p5-webserial@0.1.1/build/p5.webserial.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; Run a local server; this is required for communicating between the machine and your computer. See this guide for details on how to do this!\nOpen your sketch in Chrome1 and start making!\nWe use serial communication to communicate with the machine; Chrome is the only browser which supports WebSerial, which let\u0026rsquo;s us get up and running even quicker!\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCheck out the Machine Compatability Page for more information on what machines are currently supported.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":1,"href":"/docs/machine-compatibility/","title":"Machine Compatibility","section":"Docs","content":" Machine Compatibility # p5.fab is intended to be used with physical machines! In general, it should work with any machine running Marlin firmware. This is the firmware that many companies (e.g. Creality, Prusa, Ultimaker) use, as well as various custom/open-source machines. For more background on machine firmwares, check out the digital fabrication intro. We\u0026rsquo;ve tested p5.fab on the following machines:\nMachine Info Creality Ender3 3D Printer Prusa i3-mk3 3D Printer FLSUN Q9 Delta 3D Printer Potterbot 9 Ceramic 3D Printer Jubilee Toolchanging Machine While most of these are 3D printers, we are working on extending control to Plotters (like the AxiDraw) and CNC machines (like the Othermill). Stay tuned!\n"},{"id":2,"href":"/docs/resources/","title":"Resources","section":"Docs","content":" Resources # Here you\u0026rsquo;ll find some resources for using p5.fab, including guides which introduce key concepts, tutorials which put these concepts into practice, and examples to motivate more uses!\nThe resources here are growing; if there\u0026rsquo;s something you\u0026rsquo;d like to see added or contribute, reach out on github!\nGuides # A Gentle Introduction to Digital Fabrication # A (very!) brief overview of some key digital fabrication concepts, including: G-Code, coordinate systems, machines, and their firmware. Intended for anyone new to using machines like 3D printers.\nA Gentle Introduction to Creative Coding with p5.js # A (very!) brief overview of some key creative coding concepts, including: how to sketch with p5.js. Intended for anyone new to creative coding.\np5.fab Primer # An overview of the p5.fab library!\nTutorials # Printing a cube # A first 3D printed object with p5.fab!\nNon-Planar 3D Printing # Putting the \u0026lsquo;3D\u0026rsquo; in 3D printing.\nLine Vase 3D Print # Tuning printing parameters to create delicate structures.\nExamples # more examples to come!\n"},{"id":3,"href":"/docs/reference/","title":"Reference","section":"Docs","content":" Reference # Fab # Path Commands # moveTo()\nMove to a point. moveToX()\nMove to an X position. moveToY()\nMove to a Y position. moveToZ()\nMove to a Z position. moveToE()\nMove to a E position. move()\nMove relative to current position in x, y, and z. moveX()\nMove relative to current position in X. moveY()\nMove relative to current position in Y. moveZ()\nMove relative to current position in Z. moveE()\nMove relative to current position in E. moveExtrude()\nMove to an x,y,z position while extruding. travelTo()\nMove to an x,y,z position with a z-hop. G \u0026amp; M Codes # autoHome()\nAutohome the machine. setBedT()\nSet bed temperature. setNozzleT()\nSet nozzle temperature. setTemps()\nSet nozzle \u0026 bed temperatures. setAbsolutePosition()\nUse absolute coordinates. setAbsolutePositionXYZasdf()\nUse absolute coordinates for dimensional axes. setEAbsolute()\nUse absolute coordinates for extruder position. setEAbsolute()\nUse relative coordinates for extruder position. "},{"id":4,"href":"/docs/resources/guides/cc-intro/","title":"A Gentle Introduction to Creative Coding with p5.js","section":"Resources","content":" A Gentle Introduction to Creative Coding with p5.js # This page provides a brief introduction to some key concepts for creative coding with p5.js. It is by no means exhaustive, but provides helpful background information for newcomers to dicreative code. If you’re already familiar with computer-controlled machines but want to learn a bit about digital fabrication, check out the digital fabrication intro, or if you want to learn how to make things with p5.fab, jump ahead to the primer.\nWhat is Creative Code? # Creative code is broadly the practice of programming for expressive rather than functional purposes. There are many different creative coding libraries/frameworks/toolkits; some popular ones are p5.js, Processing, and OpenFrameworks. Different tools are surrounded by vibrant communities artists, designers, engineers, tinkerers, and anyone else who is interested in coding for the visual arts. p5.fab is built specifically to work with p5.js.\nAnatomy of a Sketch # In progress.\nGoing Further # In progress.\n"},{"id":5,"href":"/docs/resources/guides/dfab-intro/","title":"A Gentle Introduction to Digital Fabrication","section":"Resources","content":" A Gentle Introduction to Digital Fabrication # This page provides a brief introduction to some key concepts in digital fabrication. It is by no means exhaustive, but provides helpful background information for newcomers to digital fabrication machines. If you’re already familiar with computer-controlled machines but want to learn a bit about creative coding, check out the creative coding intro, or if you want to learn how to make things with p5.fab, jump ahead to the primer.\nThe ABCs of CAD, CAM, \u0026amp; CNC # Digital fabrication is the process of using computer-controlled machines to create physical objects. This process might be additive (e.g. 3D printing), subtractive (e.g. milling, laser cutting), or something else entirely (e.g. using a liquid handling robot for science experiments). Typically, we would follow the following steps to make an object:\nDesign a model. Using computer-aided design (CAD) software, we first need to design the object we want to make. There are lots of different CAD softwares; popular options include Rhino, Fusion360, FreeCAD, and TinkerCAD. There are also websites where makers can share premade models, like Thingiverse for 3D printing. Choose fabrication settings. Computer-aided manufacturing (CAM) software is used to plan the machines toolpaths\u0026ndash;or the path the machine will take as it moves through space\u0026ndash;based on the model. For 3D printing, this is called the \u0026lsquo;slicer\u0026rsquo; since the model is divided into a series of flat, 2D contours which are stacked vertically. In the CAM software, we can choose a bunch of different settings depending on the machine we\u0026rsquo;re using. For a 3D printer we can set how fast the machine should move and at what temperature should be set to melt the plastic; for a laser cutter, we can set the power of the laser. Run the machine. The CAM software will generate instructions for the computer-numeric control (CNC) machine. This process is incredibly powerful for a lot of use cases! There are a some drawbacks, though, which motivate the design of p5.fab. It\u0026rsquo;s hard to experiment creatively with different settings, since existing software assumes you want to precicely replicate the same thing many times. If you want to change a model, you need to return back to your CAD software and start again. And it requires owning and learning CAD software. p5.fab tries to offer an alternate entry point into digital fabrication by way of creative coding, integrating toolpath design and machine execution into a single environment.\nG-Code # G-Code (or ‘geometry code’) is the standard language used by CNC machines1. We can use G-Code to move the machine around! By default, the machine will use millimeter for its units. To move to the (x, y, z) position (100mm, 50mm, 200mm) using G-Code, we can use the command:\nG1 X100 Y50 Z200 ; move the the position (100, 50, 200)\nwhere G1 is the command for a ‘linear move’. Everything after the semicolon is a comment and is ignored by the machine. We could also set a speed to move at using an F parameter:\nG1 X100 Y50 Z200 F6000 ; move the the position (100, 50, 200) ; at a speed of 6000 mm/min` The F parameter sets the feedrate, or speed, to move. Of course, these settings are subject to the physical realities. If your machine is only 300mm tall, then sending a G1 Z500 will only move to a height of 300. Similarly, the machine might not be able to move as fast as you tell it to. G-Code is used in tandem with M-Codes (or ‘miscellaneous codes’) which control non-movement related functions. For example, the command M203 will set the maximum speed which each axis can move.\nDifferent machines might use slightly different sets (or \u0026lsquo;flavors\u0026rsquo;) of GCode. This depends on the control board which the machine uses (which turns G-Code commands into machine movements) and the firmware which the control board uses. p5.fab works with any machine running Marlin firmware. This is the firmware that many companies (e.g. Creality, Prusa, Ultimaker) use on their machines, as well as various custom/open-source machines. For a complete list of G and M Codes supported on Marline, check out the G-Code Dictionary.\nAlready, you might see how tedious it would be to plan movements using GCode directly. p5.fab lets you use Javascript code to build up many commands.\nCoordinate Systems # To send the machine to a position to move to, the machine has to know where it is. This is accomplished by ‘homing’ the machine when you first power it on. Most machines have 3 dimensional axes (X, Y, \u0026amp; Z). Other machines might have more; a 3D printer also has an extruder, or E axis which tracks how much filament is being extruded.\nOur G-Code movement commands can be interpreted as absolute or relative moves by the machine. In absolute positioning mode, the machine will move relative to the origin. In relative positioning mode, the machine will move relative to its last position. We can change our positioning mode using G-Codes: G90 to use absolute positions and G91 for relative. For example, say we start at the origin (0,0,0). Consider the following move commands:\n; to start, we are at the origin (0,0,0) G90 ; use absolute positioning G1 X100 Y50 Z200 ; move to the absolute position (100, 50, 200) G91 ; use relative positioning G1 X100 ; move 100mm in X relative to the last position In this example, the machine will end up at the position (200, 50, 200). Note that all subsequent commands will be in relative mode unless we explicitly return to absolute mode with a G90 command.\nThere are others, too! These are often machine-specific. For example, the popular AxiDraw pen plotter uses the EBB command set, or the ShopBot CNC machines uses SBP codes.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":6,"href":"/docs/reference/reference-pages/autohome/","title":"Autohome","section":"Reference","content":"autoHome() Autohome the machine (with a G28 command) and zero the extruder position (with a G92 E0 command). Syntax # fab.autoHome() Parameters # None\n"},{"id":7,"href":"/docs/resources/tutorials/cube-tutorial/","title":"Cube Tutorial","section":"Resources","content":" Printing a Cube # Stay tuned! For now, check out the cube example on the online editor.\n"},{"id":8,"href":"/docs/reference/reference-pages/fab/","title":"Fab","section":"Reference","content":" Fab # A class to describe a fabrication machine.\nA fab object represents a 3D printer. It is comprised of the following information:\nworkEnvelope: maximum X, Y, and Z dimensions of the machine nozzleDiameter: Diameter of the nozzle in mm filamentDiameter: Diameter of filament in mm name: a human readable string to identify this machine Syntax # fab([config])\nParameters # config: a json object specifying requisite machine information "},{"id":9,"href":"/docs/resources/tutorials/line-vase-tutorial/","title":"Line Vase Tutorial","section":"Resources","content":" Line Vase Tutorial # Stay tuned! For now, check out the line vase example on the online editor.\n"},{"id":10,"href":"/docs/reference/reference-pages/move/","title":"Move","section":"Reference","content":"move() Move relative to the current position without extruding material. Syntax # fab.move(dx, dy, dz, [velocity]) Parameters # dx Number, the relative x distance to move (in current units, mm by default) dy Number, the relative y distance to move (in current units, mm by default) dz Number, the relative z distance to move (in current units, mm by default) velocity v: Number, optional, the speed to move at (in current units/sec, inherited or 25 mm/sec by default) "},{"id":11,"href":"/docs/reference/reference-pages/moveextrude/","title":"Move Extrude","section":"Reference","content":"moveExtrude() Move directly to an absolute (x,y,z) position while extruding material. Default extrusion amounts are calculated if not specified. Syntax # fab.moveExtrude(x, y, z, [velocity], [extrusion], [multiplication]) Parameters # x Number, the x position to move to (in current units, mm by default) y Number, the y position to move to (in current units, mm by default) z Number, the z position to move to (in current units, mm by default) v v: Number, optional. The speed to move at (in current units/sec, inherited or 25 mm/sec by default) extrusion Number, optional. Interpreted as either (a) the total amount of filament to be deposited over the move, or (b) a multiplication value to modify default caluclations, depending on value of `[multiplication]` parameter multiplication Boolean, optional. If true, `extrusion` value is used as a multiplication modifier to default extrusion calculation. If fase, `extrusion` value is used a total amount of filament to deposit in mm. False by default. "},{"id":12,"href":"/docs/reference/reference-pages/moveto/","title":"Move To","section":"Reference","content":"moveTo() Move directly to an absolute (x,y,z) position without extruding material. Syntax # fab.moveTo(x, y, z, [velocity]) Parameters # x Number, the x position to move to (in current units, mm by default) y y: Number, the y position to move to (in current units, mm by default) z Number, the z position to move to (in current units, mm by default) v v: Number, optional. The speed to move at (in current units/sec, inherited or 25 mm/sec by default) "},{"id":13,"href":"/docs/reference/reference-pages/movetoe/","title":"Move To E","section":"Reference","content":"moveToE() Move directly to an absolute E position. Syntax # fab.moveToE(e, [velocity]) Parameters # e e: Number, the e position to move to (in current units, mm by default) v v: Number, optional. The speed to move at (in current units/sec, inherited or 25 mm/sec by default) - e: Number, the e position to move to (in current units, mm by default) - v: Number, optional, the speed to move at (in current units/sec, 25 mm/sec by default)"},{"id":14,"href":"/docs/reference/reference-pages/movetox/","title":"Move To X","section":"Reference","content":"moveToX() Move directly to an absolute X position without extruding material. Syntax # fab.moveToX(x, [velocity]) Parameters # x Number, the x position to move to (in current units, mm by default) v v: Number, optional. The speed to move at (in current units/sec, inherited or 25 mm/sec by default) "},{"id":15,"href":"/docs/reference/reference-pages/movex/","title":"Move To X","section":"Reference","content":"moveX() Move in X relative to the current position without extruding material. Syntax # fab.moveX(dx, [velocity]) Parameters # dx Number, the relative x distance to move (in current units, mm by default) v v: Number, optional. The speed to move at (in current units/sec, inherited or 25 mm/sec by default) "},{"id":16,"href":"/docs/reference/reference-pages/movetoy/","title":"Move To Y","section":"Reference","content":"moveToY() Move directly to an absolute Y position without extruding material. Syntax # fab.moveToY(y, [velocity]) Parameters # y Number, the y position to move to (in current units, mm by default) v v: Number, optional. The speed to move at (in current units/sec, inherited or 25 mm/sec by default) "},{"id":17,"href":"/docs/reference/reference-pages/movey/","title":"Move Y","section":"Reference","content":"moveY() Move in Y relative to the current position without extruding material. Syntax # fab.moveY(dy, [velocity]) Parameters # dy Number, the relative y distance to move (in current units, mm by default) v v: Number, optional. The speed to move at (in current units/sec, inherited or 25 mm/sec by default) "},{"id":18,"href":"/docs/reference/reference-pages/movee/","title":"moveE","section":"Reference","content":"moveE() Move in E relative to the current position. Syntax # fab.moveE(de, [velocity]) Parameters # de Number, the relative e distance to move (in current units, mm by default) v Number, optional, the speed to move at (in current units/sec, inherited or 25 mm/sec by default) "},{"id":19,"href":"/docs/reference/reference-pages/movetoz/","title":"MoveToZ","section":"Reference","content":"moveToZ() Move directly to an absolute Z position without extruding material. Syntax # fab.moveToZ(z, [velocity]) Parameters # z Number, the z position to move to (in current units, mm by default) v v: Number, optional. The speed to move at (in current units/sec, inherited or 25 mm/sec by default) "},{"id":20,"href":"/docs/reference/reference-pages/movez/","title":"MoveZ","section":"Reference","content":"moveZ() Move in Z relative to the current position without extruding material. Syntax # fab.moveZ(dz, [velocity]) Parameters # dz Number, the relative z distance to move (in current units, mm by default) v v: Number, optional. The speed to move at (in current units/sec, inherited or 25 mm/sec by default) "},{"id":21,"href":"/docs/resources/tutorials/non-planar-tutorial/","title":"Non-Planar Printing Tutorial","section":"Resources","content":" Line Vase Tutorial # Stay tuned! For now, check out the non-planar vase example on the online editor.\n"},{"id":22,"href":"/docs/resources/guides/p5fab-primer/","title":"p5.fab Primer","section":"Resources","content":" p5.fab Primer # This page provides an introduction to using p5.fab. If you’re new to digital fabrication and/or creative code and want some more context for the information presented here, check out the digital fabrication and creative coding introductions.\nAnatomy of a p5.fab Sketch # p5.fab adds to the default setup() and draw() functions a fabDraw() function. fabDraw() is run once, immediately after setup and before the first draw loop, and is where any code which generates toolpath should go! A typical sketch will look something like this:\nlet fab; function setup() { createCanvas(windowWidth, windowHeight, WEBGL); // we need to use WEBGL mode to draw 3D things fab = createFab(); // fab represents our machine } function fabDraw() { // fabDraw will be run immediately after the setup function! // Machine control commands will go here } function draw() { background(255); // a solid white background fab.render(); } In this example sketch, we declare a fab variable and use createFab to instantiate a fab object. By default, this will use default values for a Creality Ender3 3D printer. In createCanvas, we use WEBGL mode to support 3D shapes; then in draw(), we use the built-in fab.render() to show a simple visualization of our toolpaths. Since our fabDraw() loop is empty, this sketch would show and empty work envelope for now.\nMoving, Grooving, and Extruding # Let\u0026rsquo;s send some toolpath commands for 3D printing! Most of the time, we\u0026rsquo;ll want to send a few starting commands:\nfunction fabDraw() { // Set the machine up for printing fab.setAbsolutePosition(); // set all axes (x/y/z/extruder) to absolute fab.setERelative(); // put extruder in relative mode, independent of other axes fab.autoHome(); fab.setTemps(205, 60); // (nozzle, bed) °C - you should use a temperature best suited for your material } The first two commands will explicitly set the machine into absolute positioning mode, and use relative mode for the extrusion axis. This is worth doing in case your machine ended in a different mode in whatever you were last doing. Then, we\u0026rsquo;ll home the machine and wait for the nozzle and bed to heat up to the specified temperatures.\nNow we\u0026rsquo;re ready to send some movement commands! Let\u0026rsquo;s move to the point (100, 100, 0.2) on the bed; we choose 0.2 for the height because this is approximately a good starting height to lay filament down on the bed1:\nfunction fabDraw() { // Set the machine up for printing fab.setAbsolutePosition(); fab.setERelative(); fab.autoHome(); fab.setTemps(205, 60); // Now move around! fab.move(100, 100, 0.2); // (x, y, z) } If you were to send this code to your machine, you should see the printer (1) autohome, (2) get up to temperature, and then (c) move to the (x, y, z) point (100, 100, 1). All movement commands will use a default speed of 20 mm/sec. If we want to move to the center of the bed, we can also access the machine\u0026rsquo;s maxX and maxY properties:\nfunction fabDraw() { // Set the machine up for printing fab.setAbsolutePosition(); fab.setERelative(); fab.autoHome(); fab.setTemps(205, 60); // Now move around! let center = createVector(fab.maxX/2, fab.maxY/2) fab.move(center.x, center.y, 0.2); // (x, y, z) } where createVector is a handy p5.js function.While moving, we might find that a bit of filament oozes out of the nozzle. This is because filament might melt and fall out of the hot nozzle. To prevent this, we can instead use a moveRetract() command which will pull the filament away from the nozzle. We can also try moving a bit faster:\nfunction fabDraw() { // Set the machine up for printing fab.setAbsolutePosition(); fab.setERelative(); fab.autoHome(); fab.setTemps(205, 60); // Now move around! let center = createVector(fab.maxX/2, fab.maxY/2) fab.moveRetract(center.x, center.y, 0.2, 30); // (x, y, z, speed in mm/s) } moveRetract will pull the filament away from the nozzle before moving, and then restore the position (or \u0026lsquo;prime\u0026rsquo;) once it arrives at its destination. By contrast, moveExtrude will lay down filament along the specified path. By default, it will calculate the amount of filament needed based on the distance and the nozzle \u0026amp; filament diameter:\nfunction fabDraw() { // Set the machine up for printing fab.setAbsolutePosition(); fab.setERelative(); fab.autoHome(); fab.setTemps(205, 60); // Now move around! let center = createVector(fab.maxX/2, fab.maxY/2) fab.moveRetract(center.x, center.y, 1, 30); // (x, y, z, speed in mm/s) fab.moveExtrude(center.x + 100, center.y, 1, 30); // (x, y, z, speed in mm/s) fab.presentPart(); } Now, we should have a 100mm line of filament printed on the bed! The presentPart() command will push the bed plate out and the hotend up so that it\u0026rsquo;s easy to grab the printed part when complete.\nNext Steps # We\u0026rsquo;re ready to 3D print an object now! Jump to the printing a cube tutorial for some more details on 3D printing with p5.fab.\nIn practice, you\u0026rsquo;ll have to find a start height that works well for you based on your bed leveling, filament \u0026amp; nozzle diameter, etc. Typically, a height of 0 is too close to the bed (filament can\u0026rsquo;t get out of the nozzle), and too large a value means the filament won\u0026rsquo;t stick to the bed.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":23,"href":"/docs/reference/reference-pages/setabsoluteposition/","title":"Set Absolute Position","section":"Reference","content":"setAbsolutePosition() Set coordinates to absolute positioning, relative to the origin of the machine (using a G90 command). Note that G90 behaviour differs depending on firmware. For example, Marlin will set the extruder to absolute position as well, whereas Duet does not. To set absolute/relative position of dimensional and extruder positions independently, see setAbsolutePositionXYZ(), setRelativePositionXYZ(), setEAbsolute(), \u0026amp; setERelative().\nSyntax # fab.setAbsolutePosition() Parameters # None\n"},{"id":24,"href":"/docs/reference/reference-pages/setabsolutepositionxyz/","title":"Set Absolute Position XYZ","section":"Reference","content":"setAbsolutePositionXYZ() Set X/Y/Z axes to absolute position, relative to the origin of the machine, without changing the extruder positioning mode. Syntax # fab.setAbsolutePositionXYZ() Parameters # None\n"},{"id":25,"href":"/docs/reference/reference-pages/setbedt/","title":"Set Bed Temp","section":"Reference","content":"setBedT() Set the printer's bed temperature. By default, this command will wait for the nozzle temperature to reach the target temperature. Most firmware won\u0026rsquo;t wait for temperatures less than 40C since they will never be reached due to ambient temperature.\nSyntax # fab.setBedT(temperature, [wait]) Parameters # temperature Number, the temperature to heat the bed to in degrees Celcius wait Boolean, optional, parameter to wait for the target temperature to be reached before proceeding. True by default. "},{"id":26,"href":"/docs/reference/reference-pages/seteabsolute/","title":"Set E Absolute","section":"Reference","content":"setEAbsolute() Set extruder axis to use absolute position, relative to the origin, without changing the dimensional axes positioning mode. Syntax # fab.setEAbsolute() Parameters # None\n"},{"id":27,"href":"/docs/reference/reference-pages/seterelative/","title":"Set E Relative","section":"Reference","content":"setERelative() Set extruder axis to use relative position without changing the dimensional axes positioning mode. Syntax # fab.setERelative() Parameters # None\n"},{"id":28,"href":"/docs/reference/reference-pages/setnozzlet/","title":"Set Nozzle Temp","section":"Reference","content":"setNozzleT() Set the printer's nozzle temperature. By default, this command will wait for the nozzle temperature to reach the target temperature. Most firmware won\u0026rsquo;t wait for temperatures less than 40C since they will never be reached due to ambient temperature.\nSyntax # fab.setNozzleT(temperature, [wait]) Parameters # temperature Number, the temperature to heat the nozzle to in degrees Celcius wait Boolean, optional, parameter to wait for the target temperature to be reached before proceeding. True by default. "},{"id":29,"href":"/docs/reference/reference-pages/settemps/","title":"Set Temps","section":"Reference","content":"setTemps() Set the printer nozzle and bed temperature at the same time. By default, this command will wait for the temperatures to reach the target temperature. This command is faster than setting the nozzle and bed temperatures independently, as both will heat simultaneously. Most firmware won\u0026rsquo;t wait for temperatures less than 40C since they will never be reached due to ambient temperature.\nSyntax # fab.setTemps(nozzleTemperature, bedTemperature, [wait]) Parameters # nozzleTemperature Number, the temperature to heat the nozzle to in degrees Celcius bedTemperature Number, the temperature to heat the bed to in degrees Celcius wait Boolean, optional parameter to wait for the target temperature to be reached before proceeding. True by default. "},{"id":30,"href":"/docs/reference/reference-pages/travelto/","title":"Travel To","section":"Reference","content":"travelTo() Travel directly to an absolute (x,y,z) position with a z-hop (popping the nozzle away from the bed before moving, and restoring z position upon arrival), without extruding material. The hop distance is set in the current working units, and is 2mm by default. Edit this value in the printer configuration.\nSyntax # fab.travelTo(x, y, z, [velocity]) Parameters # x Number, the x position to move to (in current units, mm by default) y y: Number, the y position to move to (in current units, mm by default) z Number, the z position to move to (in current units, mm by default) v v: Number, optional. The speed to move at (in current units/sec, inherited or 25 mm/sec by default) "}]